.data
dataARR1 dd 13, 655, 12, -26, -8, 5, 18 ; Початковий масив
dataRESULT1 dw 7 DUP(0) ; Перший масив результатів (старше слово)
dataRESULT2 dw 7 DUP(0) ; Другий масив результатів (молодше слово)

.code
; Макрос для зручної обробки елементів масиву результатів
process_result MACRO source, dest1, dest2
    mov EAX, [source] ; Завантажуємо елемент початкового масиву в регістр EAX
    sal EAX, 3 ; Зсуваємо арифметично на 3 біти
    mov [dest1], AX ; Записуємо результат в перший масив результатів (старше слово)
    shr EAX, 16 ; Переносимо молодше слово до молодшої частини регістру
    mov [dest2], AX ; Записуємо результат в другий масив результатів (молодше слово)
ENDM

; Макрос для перевірки та обнулення елементів масиву, якщо вони більше D5h
check_and_zero MACRO array
    mov AX, [array]
    cmp AX, 0D5h
    jbe @F ; Перевіряємо, чи елемент менший або рівний за D5h
    mov word ptr [array], 0 ; Якщо більше D5h, записуємо 0
@@:
ENDM

entry_point proc
    lea R8, dataARR1 ; Завантажуємо адресу початкового масиву в регістр R8
    lea RBX, dataRESULT1 ; Завантажуємо адресу першого масиву результатів (старше слово) в регістр RBX
    lea RDI, dataRESULT2 ; Завантажуємо адресу другого масиву результатів (молодше слово) в регістр RDI

    mov RCX, 7 ; Кількість елементів у масиві

loopa:
    process_result R8, RBX, RDI ; Викликаємо макрос для обробки результату
    add R8, 4 ; Переходимо до наступного елемента початкового масиву
    add RBX, 2 ; Переходимо до наступного елемента першого масиву результатів (старше слово)
    add RDI, 2 ; Переходимо до наступного елемента другого масиву результатів (молодше слово)
    loop loopa ; Повторюємо цикл для кожного елемента масиву

  ; Перевірка на більше D5h у першому масиві
  lea R9, dataRESULT1
  mov RCX, 7 ; Кількість елементів у масиві результатів
check1:
    check_and_zero R9 ; Викликаємо макрос для перевірки та обнулення елементів
    add R9, 2
    loop check1

    ; Перевірка на більше D5h у другому масиві
    lea R16, dataRESULT2
    mov RCX, 7 ; Кількість елементів у масиві результатів
check2:
    check_and_zero R16 ; Викликаємо макрос для перевірки та обнулення елементів
    add R16, 2
    loop check2

ret
entry_point endp
end
